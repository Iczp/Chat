// <auto-generated />
using System;
using IczpNet.Chat.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Volo.Abp.EntityFrameworkCore;

#nullable disable

namespace IczpNet.Chat.Migrations
{
    [DbContext(typeof(ChatHttpApiHostMigrationsDbContext))]
    partial class ChatHttpApiHostMigrationsDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("_Abp_DatabaseProvider", EfCoreDatabaseProvider.SqlServer)
                .HasAnnotation("ProductVersion", "6.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("IczpNet.Chat.ChatObjects.ChatObject", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("AutoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("AutoId"), 1L, 1);

                    b.Property<int>("ChatObjectType")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("ConcurrencyStamp");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreationTime");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CreatorId");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("DeleterId");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletionTime");

                    b.Property<string>("ExtraProperties")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ExtraProperties");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("LastModificationTime");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("LastModifierId");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("TenantId");

                    b.HasKey("Id");

                    b.ToTable("Chat_ChatObject", (string)null);
                });

            modelBuilder.Entity("IczpNet.Chat.Messages.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("AutoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("AutoId"), 1L, 1);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("ConcurrencyStamp");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreationTime");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CreatorId");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("DeleterId");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletionTime");

                    b.Property<string>("ExtraProperties")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ExtraProperties");

                    b.Property<long>("ForwardDepth")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("ForwardMessageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IsDeleted");

                    b.Property<string>("KeyName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("KeyValue")
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("LastModificationTime");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("LastModifierId");

                    b.Property<int>("MessageChannel")
                        .HasColumnType("int");

                    b.Property<int>("MessageType")
                        .HasColumnType("int");

                    b.Property<long>("QuoteDepth")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("QuoteMessageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ReceiverId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("RollbackTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("SenderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("ForwardMessageId");

                    b.HasIndex("QuoteMessageId");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.ToTable("Chat_Message", (string)null);
                });

            modelBuilder.Entity("IczpNet.Chat.Officials.Official", b =>
                {
                    b.HasBaseType("IczpNet.Chat.ChatObjects.ChatObject");

                    b.Property<Guid?>("ChatObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("ChatObjectId");

                    b.ToTable("Chat_Official", (string)null);
                });

            modelBuilder.Entity("IczpNet.Chat.Robots.Robot", b =>
                {
                    b.HasBaseType("IczpNet.Chat.ChatObjects.ChatObject");

                    b.Property<Guid?>("ChatObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("ChatObjectId");

                    b.ToTable("Chat_Robot", (string)null);
                });

            modelBuilder.Entity("IczpNet.Chat.Rooms.Room", b =>
                {
                    b.HasBaseType("IczpNet.Chat.ChatObjects.ChatObject");

                    b.Property<Guid?>("ChatObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("ChatObjectId");

                    b.ToTable("Chat_Room", (string)null);
                });

            modelBuilder.Entity("IczpNet.Chat.Messages.Message", b =>
                {
                    b.HasOne("IczpNet.Chat.Messages.Message", "ForwardMessage")
                        .WithMany("ForwardedMessageList")
                        .HasForeignKey("ForwardMessageId");

                    b.HasOne("IczpNet.Chat.Messages.Message", "QuoteMessage")
                        .WithMany("QuotedMessageList")
                        .HasForeignKey("QuoteMessageId");

                    b.HasOne("IczpNet.Chat.ChatObjects.ChatObject", "Receiver")
                        .WithMany("ReceiverMessageList")
                        .HasForeignKey("ReceiverId");

                    b.HasOne("IczpNet.Chat.ChatObjects.ChatObject", "Sender")
                        .WithMany("SenderMessageList")
                        .HasForeignKey("SenderId");

                    b.Navigation("ForwardMessage");

                    b.Navigation("QuoteMessage");

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("IczpNet.Chat.Officials.Official", b =>
                {
                    b.HasOne("IczpNet.Chat.ChatObjects.ChatObject", "ChatObject")
                        .WithMany("OfficialList")
                        .HasForeignKey("ChatObjectId");

                    b.HasOne("IczpNet.Chat.ChatObjects.ChatObject", null)
                        .WithOne()
                        .HasForeignKey("IczpNet.Chat.Officials.Official", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("ChatObject");
                });

            modelBuilder.Entity("IczpNet.Chat.Robots.Robot", b =>
                {
                    b.HasOne("IczpNet.Chat.ChatObjects.ChatObject", "ChatObject")
                        .WithMany("RobotList")
                        .HasForeignKey("ChatObjectId");

                    b.HasOne("IczpNet.Chat.ChatObjects.ChatObject", null)
                        .WithOne()
                        .HasForeignKey("IczpNet.Chat.Robots.Robot", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("ChatObject");
                });

            modelBuilder.Entity("IczpNet.Chat.Rooms.Room", b =>
                {
                    b.HasOne("IczpNet.Chat.ChatObjects.ChatObject", "ChatObject")
                        .WithMany("RoomList")
                        .HasForeignKey("ChatObjectId");

                    b.HasOne("IczpNet.Chat.ChatObjects.ChatObject", null)
                        .WithOne()
                        .HasForeignKey("IczpNet.Chat.Rooms.Room", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("ChatObject");
                });

            modelBuilder.Entity("IczpNet.Chat.ChatObjects.ChatObject", b =>
                {
                    b.Navigation("OfficialList");

                    b.Navigation("ReceiverMessageList");

                    b.Navigation("RobotList");

                    b.Navigation("RoomList");

                    b.Navigation("SenderMessageList");
                });

            modelBuilder.Entity("IczpNet.Chat.Messages.Message", b =>
                {
                    b.Navigation("ForwardedMessageList");

                    b.Navigation("QuotedMessageList");
                });
#pragma warning restore 612, 618
        }
    }
}

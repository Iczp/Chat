// <auto-generated />
using System;
using IczpNet.Chat.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Volo.Abp.EntityFrameworkCore;

#nullable disable

namespace IczpNet.Chat.Migrations
{
    [DbContext(typeof(ChatHttpApiHostMigrationsDbContext))]
    [Migration("20230526083128_SessionUnit_AddIndex_Sorting_Desc_LastMessageId_Asc")]
    partial class SessionUnit_AddIndex_Sorting_Desc_LastMessageId_Asc
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("_Abp_DatabaseProvider", EfCoreDatabaseProvider.SqlServer)
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ArticleContentMessage", b =>
                {
                    b.Property<Guid>("ArticleContentListId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("MessageListId")
                        .HasColumnType("bigint");

                    b.HasKey("ArticleContentListId", "MessageListId");

                    b.HasIndex("MessageListId");

                    b.ToTable("Chat_Message_MapTo_ArticleContent", (string)null);
                });

            modelBuilder.Entity("CmdContentMessage", b =>
                {
                    b.Property<Guid>("CmdContentListId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("MessageListId")
                        .HasColumnType("bigint");

                    b.HasKey("CmdContentListId", "MessageListId");

                    b.HasIndex("MessageListId");

                    b.ToTable("Chat_Message_MapTo_CmdContent", (string)null);
                });

            modelBuilder.Entity("ContactsContentMessage", b =>
                {
                    b.Property<Guid>("ContactsContentListId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("MessageListId")
                        .HasColumnType("bigint");

                    b.HasKey("ContactsContentListId", "MessageListId");

                    b.HasIndex("MessageListId");

                    b.ToTable("Chat_Message_MapTo_ContactsContent", (string)null);
                });

            modelBuilder.Entity("FileContentMessage", b =>
                {
                    b.Property<Guid>("FileContentListId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("MessageListId")
                        .HasColumnType("bigint");

                    b.HasKey("FileContentListId", "MessageListId");

                    b.HasIndex("MessageListId");

                    b.ToTable("Chat_Message_MapTo_FileContent", (string)null);
                });

            modelBuilder.Entity("HistoryContentMessage", b =>
                {
                    b.Property<Guid>("HistoryContentListId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("MessageListId")
                        .HasColumnType("bigint");

                    b.HasKey("HistoryContentListId", "MessageListId");

                    b.HasIndex("MessageListId");

                    b.ToTable("Chat_Message_MapTo_HistoryContent", (string)null);
                });

            modelBuilder.Entity("HtmlContentMessage", b =>
                {
                    b.Property<Guid>("HtmlContentListId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("MessageListId")
                        .HasColumnType("bigint");

                    b.HasKey("HtmlContentListId", "MessageListId");

                    b.HasIndex("MessageListId");

                    b.ToTable("Chat_Message_MapTo_HtmlContent", (string)null);
                });

            modelBuilder.Entity("IczpNet.Chat.Articles.Article", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ArticleType")
                        .HasColumnType("int");

                    b.Property<string>("Author")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("ConcurrencyStamp");

                    b.Property<string>("Content")
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CoverImageUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreationTime");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CreatorId");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("DeleterId");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletionTime");

                    b.Property<string>("Description")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("EditorType")
                        .HasColumnType("int");

                    b.Property<string>("ExtraProperties")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ExtraProperties");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("LastModificationTime");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("LastModifierId");

                    b.Property<string>("OriginalUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid?>("OwnerUserId")
                        .HasMaxLength(36)
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("TenantId");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<long>("VisitsCount")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Chat_Article", (string)null);
                });

            modelBuilder.Entity("IczpNet.Chat.Articles.ArticleMessage", b =>
                {
                    b.Property<long>("MessageId")
                        .HasColumnType("bigint");

                    b.Property<Guid>("ArticleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("ConcurrencyStamp");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreationTime");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CreatorId");

                    b.Property<string>("ExtraProperties")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ExtraProperties");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("LastModificationTime");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("LastModifierId");

                    b.HasKey("MessageId", "ArticleId");

                    b.HasIndex("ArticleId");

                    b.ToTable("Chat_ArticleMessage", (string)null);
                });

            modelBuilder.Entity("IczpNet.Chat.ChatObjectCategoryUnits.ChatObjectCategoryUnit", b =>
                {
                    b.Property<long>("ChatObjectId")
                        .HasColumnType("bigint");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("ConcurrencyStamp");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreationTime");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CreatorId");

                    b.Property<string>("ExtraProperties")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ExtraProperties");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("LastModificationTime");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("LastModifierId");

                    b.HasKey("ChatObjectId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Chat_ChatObjectCategoryUnit", (string)null);
                });

            modelBuilder.Entity("IczpNet.Chat.ChatObjectCategorys.ChatObjectCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ChatObjectTypeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ChildrenCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("ConcurrencyStamp");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreationTime");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CreatorId");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("DeleterId");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletionTime");

                    b.Property<int>("Depth")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ExtraProperties")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ExtraProperties");

                    b.Property<string>("FullPath")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("FullPathName")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("LastModificationTime");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("LastModifierId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Sorting")
                        .HasColumnType("float");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("ChatObjectTypeId");

                    b.HasIndex("ParentId");

                    b.ToTable("Chat_ChatObjectCategory", (string)null);
                });

            modelBuilder.Entity("IczpNet.Chat.ChatObjectTypes.ChatObjectType", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("ConcurrencyStamp");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreationTime");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CreatorId");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("DeleterId");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletionTime");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ExtraProperties")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ExtraProperties");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IsDeleted");

                    b.Property<bool>("IsHasChild")
                        .HasColumnType("bit");

                    b.Property<bool>("IsStatic")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("LastModificationTime");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("LastModifierId");

                    b.Property<int>("MaxDepth")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ObjectType")
                        .HasColumnType("int");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("TenantId");

                    b.HasKey("Id");

                    b.ToTable("Chat_ChatObjectType", (string)null);
                });

            modelBuilder.Entity("IczpNet.Chat.ChatObjects.ChatObject", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<Guid?>("AppUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ChatObjectTypeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ChildrenCount")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("ConcurrencyStamp");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreationTime");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CreatorId");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("DeleterId");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletionTime");

                    b.Property<int>("Depth")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ExtraProperties")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ExtraProperties");

                    b.Property<string>("FullPath")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("FullPathName")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IsDeleted");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit");

                    b.Property<bool>("IsStatic")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("LastModificationTime");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("LastModifierId");

                    b.Property<long>("MaxMessageAutoId")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("MottoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NameSpelling")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("NameSpellingAbbreviation")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("ObjectType")
                        .HasColumnType("int");

                    b.Property<long?>("ParentId")
                        .HasColumnType("bigint");

                    b.Property<string>("Portrait")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("ServiceStatus")
                        .HasColumnType("int");

                    b.Property<double>("Sorting")
                        .HasColumnType("float");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("TenantId");

                    b.Property<int>("VerificationMethod")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ChatObjectTypeId");

                    b.HasIndex("Code");

                    b.HasIndex("FullPath");

                    b.HasIndex("MottoId");

                    b.HasIndex("Name");

                    b.HasIndex("ParentId");

                    b.ToTable("Chat_ChatObject", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("IczpNet.Chat.Connections.Connection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ActiveTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Agent")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<Guid?>("AppUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ChatObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("ConcurrencyStamp");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreationTime");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CreatorId");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("DeleterId");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletionTime");

                    b.Property<string>("DeviceId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ExtraProperties")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ExtraProperties");

                    b.Property<string>("Ip")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("LastModificationTime");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("LastModifierId");

                    b.Property<string>("Server")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("TenantId");

                    b.HasKey("Id");

                    b.ToTable("Chat_Connection", (string)null);
                });

            modelBuilder.Entity("IczpNet.Chat.Favorites.Favorite", b =>
                {
                    b.Property<Guid>("SessionUnitId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("MessageId")
                        .HasColumnType("bigint");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("ConcurrencyStamp");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreationTime");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CreatorId");

                    b.Property<long?>("DestinationId")
                        .HasColumnType("bigint");

                    b.Property<string>("DeviceId")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("ExtraProperties")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ExtraProperties");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("LastModificationTime");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("LastModifierId");

                    b.Property<int>("MessageType")
                        .HasColumnType("int");

                    b.Property<long?>("OwnerId")
                        .HasColumnType("bigint");

                    b.Property<long>("Size")
                        .HasColumnType("bigint");

                    b.HasKey("SessionUnitId", "MessageId");

                    b.HasIndex("DestinationId");

                    b.HasIndex("MessageId");

                    b.HasIndex("OwnerId");

                    b.ToTable("Chat_Favorite", (string)null);
                });

            modelBuilder.Entity("IczpNet.Chat.Follows.Follow", b =>
                {
                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DestinationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("ConcurrencyStamp");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreationTime");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CreatorId");

                    b.Property<string>("ExtraProperties")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ExtraProperties");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("LastModificationTime");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("LastModifierId");

                    b.HasKey("OwnerId", "DestinationId");

                    b.ToTable("Chat_Follow", (string)null);
                });

            modelBuilder.Entity("IczpNet.Chat.MessageSections.Counters.FavoritedCounter", b =>
                {
                    b.Property<long>("MessageId")
                        .HasColumnType("bigint");

                    b.Property<long>("Count")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreationTime");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("LastModificationTime");

                    b.HasKey("MessageId");

                    b.ToTable("Chat_FavoritedCounter", (string)null);
                });

            modelBuilder.Entity("IczpNet.Chat.MessageSections.Counters.OpenedCounter", b =>
                {
                    b.Property<long>("MessageId")
                        .HasColumnType("bigint");

                    b.Property<long>("Count")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreationTime");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("LastModificationTime");

                    b.HasKey("MessageId");

                    b.ToTable("Chat_OpenedCounter", (string)null);
                });

            modelBuilder.Entity("IczpNet.Chat.MessageSections.Counters.ReadedCounter", b =>
                {
                    b.Property<long>("MessageId")
                        .HasColumnType("bigint");

                    b.Property<long>("Count")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreationTime");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("LastModificationTime");

                    b.HasKey("MessageId");

                    b.ToTable("Chat_ReadedCounter", (string)null);
                });

            modelBuilder.Entity("IczpNet.Chat.MessageSections.MessageContents.MessageContent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Body")
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("ConcurrencyStamp");

                    b.Property<string>("ContentType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreationTime");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CreatorId");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("DeleterId");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletionTime");

                    b.Property<string>("ExtraProperties")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ExtraProperties");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("LastModificationTime");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("LastModifierId");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("TenantId");

                    b.HasKey("Id");

                    b.ToTable("Chat_MessageContent", (string)null);
                });

            modelBuilder.Entity("IczpNet.Chat.MessageSections.MessageReminders.MessageReminder", b =>
                {
                    b.Property<Guid>("SessionUnitId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("MessageId")
                        .HasColumnType("bigint");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("ConcurrencyStamp");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreationTime");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CreatorId");

                    b.Property<string>("ExtraProperties")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ExtraProperties");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("LastModificationTime");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("LastModifierId");

                    b.Property<int>("ReminderType")
                        .HasColumnType("int");

                    b.HasKey("SessionUnitId", "MessageId");

                    b.HasIndex("MessageId");

                    b.ToTable("Chat_MessageReminder", (string)null);
                });

            modelBuilder.Entity("IczpNet.Chat.MessageSections.Messages.Message", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("Channel")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("ConcurrencyStamp");

                    b.Property<string>("ContentJson")
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreationTime");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CreatorId");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("DeleterId");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletionTime");

                    b.Property<string>("ExtraProperties")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ExtraProperties");

                    b.Property<int>("FavoritedCount")
                        .HasColumnType("int");

                    b.Property<long>("ForwardDepth")
                        .HasColumnType("bigint");

                    b.Property<long?>("ForwardMessageId")
                        .HasColumnType("bigint");

                    b.Property<string>("ForwardPath")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IsDeleted");

                    b.Property<bool>("IsPrivate")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRemindAll")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRollbacked")
                        .HasColumnType("bit");

                    b.Property<bool>("IsScoped")
                        .HasColumnType("bit");

                    b.Property<string>("KeyName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("KeyValue")
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("LastModificationTime");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("LastModifierId");

                    b.Property<Guid?>("MessageContentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("MessageType")
                        .HasColumnType("int");

                    b.Property<int>("OpenedCount")
                        .HasColumnType("int");

                    b.Property<string>("Provider")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<long>("QuoteDepth")
                        .HasColumnType("bigint");

                    b.Property<long?>("QuoteMessageId")
                        .HasColumnType("bigint");

                    b.Property<string>("QuotePath")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("ReadedCount")
                        .HasColumnType("int");

                    b.Property<long?>("ReceiverId")
                        .HasColumnType("bigint");

                    b.Property<int?>("ReceiverType")
                        .HasColumnType("int");

                    b.Property<int?>("ReminderType")
                        .HasColumnType("int");

                    b.Property<DateTime?>("RollbackTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("SenderId")
                        .HasColumnType("bigint");

                    b.Property<int?>("SenderType")
                        .HasColumnType("int");

                    b.Property<Guid?>("SessionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SessionKey")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("SessionUnitCount")
                        .HasColumnType("int");

                    b.Property<Guid?>("SessionUnitId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("Size")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("ForwardMessageId");

                    b.HasIndex("Id")
                        .IsDescending();

                    b.HasIndex("MessageContentId");

                    b.HasIndex("QuoteMessageId");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.HasIndex("SessionId");

                    b.HasIndex("SessionUnitCount");

                    b.HasIndex("SessionUnitId");

                    b.ToTable("Chat_Message", (string)null);
                });

            modelBuilder.Entity("IczpNet.Chat.MessageSections.Templates.ArticleContent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ArticleType")
                        .HasColumnType("int");

                    b.Property<string>("Author")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("ConcurrencyStamp");

                    b.Property<string>("Content")
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CoverImageUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreationTime");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CreatorId");

                    b.Property<string>("CreatorUserId")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("DeleterId");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletionTime");

                    b.Property<string>("Description")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("EditorType")
                        .HasColumnType("int");

                    b.Property<string>("ExtraProperties")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ExtraProperties");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IsDeleted");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("LastModificationTime");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("LastModifierId");

                    b.Property<string>("OriginalUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<long?>("OwnerId")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("TenantId");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<long>("VisitsCount")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Chat_Message_Template_ArticleContent", (string)null);
                });

            modelBuilder.Entity("IczpNet.Chat.MessageSections.Templates.CmdContent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Cmd")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("ConcurrencyStamp");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreationTime");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CreatorId");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("DeleterId");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletionTime");

                    b.Property<string>("ExtraProperties")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ExtraProperties");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IsDeleted");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("LastModificationTime");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("LastModifierId");

                    b.Property<long?>("OwnerId")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("TenantId");

                    b.Property<string>("Text")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Url")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Chat_Message_Template_CmdContent", (string)null);
                });

            modelBuilder.Entity("IczpNet.Chat.MessageSections.Templates.ContactsContent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("ConcurrencyStamp");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreationTime");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CreatorId");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("DeleterId");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletionTime");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<long>("DestinationId")
                        .HasColumnType("bigint");

                    b.Property<string>("ExtraProperties")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ExtraProperties");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IsDeleted");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("LastModificationTime");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("LastModifierId");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("ObjectType")
                        .HasColumnType("int");

                    b.Property<long?>("OwnerId")
                        .HasColumnType("bigint");

                    b.Property<string>("Portrait")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Remark")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("DestinationId");

                    b.HasIndex("OwnerId");

                    b.ToTable("Chat_Message_Template_ContactsContent", (string)null);
                });

            modelBuilder.Entity("IczpNet.Chat.MessageSections.Templates.FileContent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ActionUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("ConcurrencyStamp");

                    b.Property<long?>("ContentLength")
                        .HasColumnType("bigint");

                    b.Property<string>("ContentType")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreationTime");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CreatorId");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("DeleterId");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletionTime");

                    b.Property<string>("ExtraProperties")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ExtraProperties");

                    b.Property<string>("FileName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IsDeleted");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("LastModificationTime");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("LastModifierId");

                    b.Property<long?>("OwnerId")
                        .HasColumnType("bigint");

                    b.Property<string>("Suffix")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("TenantId");

                    b.Property<string>("Url")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Chat_Message_Template_FileContent", (string)null);
                });

            modelBuilder.Entity("IczpNet.Chat.MessageSections.Templates.HistoryContent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("ConcurrencyStamp");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreationTime");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CreatorId");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("DeleterId");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletionTime");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ExtraProperties")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ExtraProperties");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IsDeleted");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("LastModificationTime");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("LastModifierId");

                    b.Property<long?>("OwnerId")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("TenantId");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Chat_Message_Template_HistoryContent", (string)null);
                });

            modelBuilder.Entity("IczpNet.Chat.MessageSections.Templates.HistoryMessage", b =>
                {
                    b.Property<long>("MessageId")
                        .HasColumnType("bigint");

                    b.Property<Guid>("HistoryContentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("ConcurrencyStamp");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreationTime");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CreatorId");

                    b.Property<string>("ExtraProperties")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ExtraProperties");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("LastModificationTime");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("LastModifierId");

                    b.HasKey("MessageId", "HistoryContentId");

                    b.HasIndex("HistoryContentId");

                    b.ToTable("Chat_HistoryMessage", (string)null);
                });

            modelBuilder.Entity("IczpNet.Chat.MessageSections.Templates.HtmlContent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("ConcurrencyStamp");

                    b.Property<string>("Content")
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreationTime");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CreatorId");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("DeleterId");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletionTime");

                    b.Property<int>("EditorType")
                        .HasColumnType("int");

                    b.Property<string>("ExtraProperties")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ExtraProperties");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IsDeleted");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("LastModificationTime");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("LastModifierId");

                    b.Property<string>("OriginalUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<long?>("OwnerId")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("TenantId");

                    b.Property<string>("Title")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Chat_Message_Template_HtmlContent", (string)null);
                });

            modelBuilder.Entity("IczpNet.Chat.MessageSections.Templates.ImageContent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ActionUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("ConcurrencyStamp");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreationTime");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CreatorId");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("DeleterId");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletionTime");

                    b.Property<string>("ExtraProperties")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ExtraProperties");

                    b.Property<int?>("Height")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IsDeleted");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("LastModificationTime");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("LastModifierId");

                    b.Property<string>("Orientation")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<long?>("OwnerId")
                        .HasColumnType("bigint");

                    b.Property<string>("Qrcode")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("Size")
                        .HasColumnType("int");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("TenantId");

                    b.Property<string>("ThumbnailActionUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ThumbnailUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Url")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("Width")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Chat_Message_Template_ImageContent", (string)null);
                });

            modelBuilder.Entity("IczpNet.Chat.MessageSections.Templates.LinkContent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("ConcurrencyStamp");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreationTime");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CreatorId");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("DeleterId");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletionTime");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ExtraProperties")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ExtraProperties");

                    b.Property<string>("Image")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IsDeleted");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("bit");

                    b.Property<string>("IssuerIcon")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("IssuerName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("LastModificationTime");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("LastModifierId");

                    b.Property<long?>("OwnerId")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("TenantId");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Chat_Message_Template_LinkContent", (string)null);
                });

            modelBuilder.Entity("IczpNet.Chat.MessageSections.Templates.LocationContent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("ConcurrencyStamp");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreationTime");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CreatorId");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("DeleterId");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletionTime");

                    b.Property<string>("ExtraProperties")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ExtraProperties");

                    b.Property<string>("Image")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IsDeleted");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("LastModificationTime");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("LastModifierId");

                    b.Property<float>("Latitude")
                        .HasColumnType("real");

                    b.Property<float>("Longitude")
                        .HasColumnType("real");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<long?>("OwnerId")
                        .HasColumnType("bigint");

                    b.Property<string>("Provider")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Chat_Message_Template_LocationContent", (string)null);
                });

            modelBuilder.Entity("IczpNet.Chat.MessageSections.Templates.SoundContent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("ConcurrencyStamp");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreationTime");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CreatorId");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("DeleterId");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletionTime");

                    b.Property<string>("ExtraProperties")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ExtraProperties");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IsDeleted");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("LastModificationTime");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("LastModifierId");

                    b.Property<long?>("OwnerId")
                        .HasColumnType("bigint");

                    b.Property<string>("Path")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<long?>("Size")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("TenantId");

                    b.Property<string>("Text")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("Time")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Chat_Message_Template_SoundContent", (string)null);
                });

            modelBuilder.Entity("IczpNet.Chat.MessageSections.Templates.TextContent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("ConcurrencyStamp");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreationTime");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CreatorId");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("DeleterId");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletionTime");

                    b.Property<string>("ExtraProperties")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ExtraProperties");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IsDeleted");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("LastModificationTime");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("LastModifierId");

                    b.Property<long?>("OwnerId")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("TenantId");

                    b.Property<string>("Text")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Chat_Message_Template_TextContent", (string)null);
                });

            modelBuilder.Entity("IczpNet.Chat.MessageSections.Templates.VideoContent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("ConcurrencyStamp");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreationTime");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CreatorId");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("DeleterId");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletionTime");

                    b.Property<int?>("Duration")
                        .HasColumnType("int");

                    b.Property<string>("ExtraProperties")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ExtraProperties");

                    b.Property<int?>("Height")
                        .HasColumnType("int");

                    b.Property<int?>("ImageHeight")
                        .HasColumnType("int");

                    b.Property<int?>("ImageSize")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int?>("ImageWidth")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IsDeleted");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("LastModificationTime");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("LastModifierId");

                    b.Property<long?>("OwnerId")
                        .HasColumnType("bigint");

                    b.Property<int?>("Size")
                        .HasColumnType("int");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("TenantId");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int?>("Width")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Chat_Message_Template_VideoContent", (string)null);
                });

            modelBuilder.Entity("IczpNet.Chat.Mottos.Motto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("ConcurrencyStamp");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreationTime");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CreatorId");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("DeleterId");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletionTime");

                    b.Property<string>("ExtraProperties")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ExtraProperties");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("LastModificationTime");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("LastModifierId");

                    b.Property<long>("OwnerId")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("TenantId");

                    b.Property<string>("Title")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Chat_Motto", (string)null);
                });

            modelBuilder.Entity("IczpNet.Chat.OpenedRecorders.OpenedRecorder", b =>
                {
                    b.Property<Guid>("SessionUnitId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("MessageId")
                        .HasColumnType("bigint");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("ConcurrencyStamp");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreationTime");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CreatorId");

                    b.Property<long?>("DestinationId")
                        .HasColumnType("bigint");

                    b.Property<string>("DeviceId")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("ExtraProperties")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ExtraProperties");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("LastModificationTime");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("LastModifierId");

                    b.Property<long?>("OwnerId")
                        .HasColumnType("bigint");

                    b.HasKey("SessionUnitId", "MessageId");

                    b.HasIndex("DestinationId");

                    b.HasIndex("MessageId");

                    b.HasIndex("OwnerId");

                    b.ToTable("Chat_OpenedRecorder", (string)null);
                });

            modelBuilder.Entity("IczpNet.Chat.ReadedRecorders.ReadedRecorder", b =>
                {
                    b.Property<Guid>("SessionUnitId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("MessageId")
                        .HasColumnType("bigint");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("ConcurrencyStamp");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreationTime");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CreatorId");

                    b.Property<long?>("DestinationId")
                        .HasColumnType("bigint");

                    b.Property<string>("DeviceId")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("ExtraProperties")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ExtraProperties");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("LastModificationTime");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("LastModifierId");

                    b.Property<long?>("OwnerId")
                        .HasColumnType("bigint");

                    b.HasKey("SessionUnitId", "MessageId");

                    b.HasIndex("DestinationId");

                    b.HasIndex("MessageId");

                    b.HasIndex("OwnerId");

                    b.ToTable("Chat_ReadedRecorder", (string)null);
                });

            modelBuilder.Entity("IczpNet.Chat.RedEnvelopes.RedEnvelopeContent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("ConcurrencyStamp");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreationTime");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CreatorId");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("DeleterId");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletionTime");

                    b.Property<DateTime?>("ExpireTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExtraProperties")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ExtraProperties");

                    b.Property<int>("GrantMode")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IsDeleted");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("LastModificationTime");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("LastModifierId");

                    b.Property<long?>("OwnerId")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("TenantId");

                    b.Property<string>("Text")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Chat_Message_Template_RedEnvelopeContent", (string)null);
                });

            modelBuilder.Entity("IczpNet.Chat.RedEnvelopes.RedEnvelopeUnit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("ConcurrencyStamp");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreationTime");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CreatorId");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("DeleterId");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletionTime");

                    b.Property<string>("ExtraProperties")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ExtraProperties");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IsDeleted");

                    b.Property<bool>("IsOwned")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTop")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("LastModificationTime");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("LastModifierId");

                    b.Property<DateTime?>("OwnedTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("OwnerId")
                        .HasColumnType("bigint");

                    b.Property<Guid>("RedEnvelopeContentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("RollbackTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.HasIndex("RedEnvelopeContentId");

                    b.ToTable("Chat_RedEnvelopeUnit", (string)null);
                });

            modelBuilder.Entity("IczpNet.Chat.Scopeds.Scoped", b =>
                {
                    b.Property<Guid>("SessionUnitId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("MessageId")
                        .HasColumnType("bigint");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("ConcurrencyStamp");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreationTime");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CreatorId");

                    b.Property<string>("ExtraProperties")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ExtraProperties");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("LastModificationTime");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("LastModifierId");

                    b.HasKey("SessionUnitId", "MessageId");

                    b.HasIndex("MessageId");

                    b.ToTable("Chat_Scoped", (string)null);
                });

            modelBuilder.Entity("IczpNet.Chat.SessionSections.FriendshipRequests.FriendshipRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("ConcurrencyStamp");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreationTime");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CreatorId");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("DeleterId");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletionTime");

                    b.Property<long?>("DestinationId")
                        .HasColumnType("bigint");

                    b.Property<string>("DeviceId")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("ExtraProperties")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ExtraProperties");

                    b.Property<string>("HandlMessage")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("HandlTime")
                        .HasMaxLength(200)
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsAgreed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IsDeleted");

                    b.Property<bool>("IsHandled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("LastModificationTime");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("LastModifierId");

                    b.Property<string>("Message")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<long>("OwnerId")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("DestinationId");

                    b.HasIndex("OwnerId");

                    b.ToTable("Chat_FriendshipRequest", (string)null);
                });

            modelBuilder.Entity("IczpNet.Chat.SessionSections.FriendshipTagUnits.FriendshipTagUnit", b =>
                {
                    b.Property<Guid>("FriendshipId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FriendshipTagId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("ConcurrencyStamp");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreationTime");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CreatorId");

                    b.Property<string>("ExtraProperties")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ExtraProperties");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("LastModificationTime");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("LastModifierId");

                    b.HasKey("FriendshipId", "FriendshipTagId");

                    b.HasIndex("FriendshipTagId");

                    b.ToTable("Chat_FriendshipTagUnit", (string)null);
                });

            modelBuilder.Entity("IczpNet.Chat.SessionSections.Friendships.Friendship", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BackgroundImage")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("ConcurrencyStamp");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreationTime");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CreatorId");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("DeleterId");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletionTime");

                    b.Property<long?>("DestinationId")
                        .HasColumnType("bigint");

                    b.Property<string>("ExtraProperties")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ExtraProperties");

                    b.Property<bool>("IsCantacts")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IsDeleted");

                    b.Property<bool>("IsImmersed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPassive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsShowMemberName")
                        .HasColumnType("bit");

                    b.Property<bool>("IsShowRead")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("LastModificationTime");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("LastModifierId");

                    b.Property<long>("OwnerId")
                        .HasColumnType("bigint");

                    b.Property<string>("Remarks")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Rename")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("RequestId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long?>("SortingNumber")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("DestinationId");

                    b.HasIndex("OwnerId");

                    b.HasIndex("RequestId");

                    b.ToTable("Chat_Friendship", (string)null);
                });

            modelBuilder.Entity("IczpNet.Chat.SessionSections.Friendships.FriendshipTag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("ConcurrencyStamp");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreationTime");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CreatorId");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("DeleterId");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletionTime");

                    b.Property<string>("ExtraProperties")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ExtraProperties");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("LastModificationTime");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("LastModifierId");

                    b.Property<string>("Name")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<long?>("OwnerId")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Chat_FriendshipTag", (string)null);
                });

            modelBuilder.Entity("IczpNet.Chat.SessionSections.SessionOrganizations.SessionOrganization", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("ChildrenCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("ConcurrencyStamp");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreationTime");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CreatorId");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("DeleterId");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletionTime");

                    b.Property<int>("Depth")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ExtraProperties")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ExtraProperties");

                    b.Property<string>("FullPath")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("FullPathName")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("LastModificationTime");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("LastModifierId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<long?>("ParentId")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("SessionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Sorting")
                        .HasColumnType("float");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.HasIndex("SessionId");

                    b.ToTable("Chat_SessionOrganization", (string)null);
                });

            modelBuilder.Entity("IczpNet.Chat.SessionSections.SessionPermissionDefinitions.SessionPermissionDefinition", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("ConcurrencyStamp");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreationTime");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CreatorId");

                    b.Property<long>("DefaultValue")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("DeleterId");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletionTime");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ExtraProperties")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ExtraProperties");

                    b.Property<long?>("GroupId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IsDeleted");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("LastModificationTime");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("LastModifierId");

                    b.Property<long>("MaxValue")
                        .HasColumnType("bigint");

                    b.Property<long>("MinValue")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long>("Sorting")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("Sorting")
                        .IsDescending();

                    b.ToTable("Chat_SessionPermissionDefinition", (string)null);
                });

            modelBuilder.Entity("IczpNet.Chat.SessionSections.SessionPermissionGroups.SessionPermissionGroup", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("ChildrenCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("ConcurrencyStamp");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreationTime");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CreatorId");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("DeleterId");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletionTime");

                    b.Property<int>("Depth")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ExtraProperties")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ExtraProperties");

                    b.Property<string>("FullPath")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("FullPathName")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("LastModificationTime");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("LastModifierId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<long?>("ParentId")
                        .HasColumnType("bigint");

                    b.Property<double>("Sorting")
                        .HasColumnType("float");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("FullPath");

                    b.HasIndex("ParentId");

                    b.HasIndex("Sorting")
                        .IsDescending();

                    b.ToTable("Chat_SessionPermissionGroup", (string)null);
                });

            modelBuilder.Entity("IczpNet.Chat.SessionSections.SessionPermissionRoleGrants.SessionPermissionRoleGrant", b =>
                {
                    b.Property<string>("DefinitionId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("ConcurrencyStamp");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreationTime");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CreatorId");

                    b.Property<string>("ExtraProperties")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ExtraProperties");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("LastModificationTime");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("LastModifierId");

                    b.Property<long>("Value")
                        .HasColumnType("bigint");

                    b.HasKey("DefinitionId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("Chat_SessionPermissionRoleGrant", (string)null);
                });

            modelBuilder.Entity("IczpNet.Chat.SessionSections.SessionPermissionRoleGrants.SessionPermissionUnitGrant", b =>
                {
                    b.Property<string>("DefinitionId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("SessionUnitId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("ConcurrencyStamp");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreationTime");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CreatorId");

                    b.Property<string>("ExtraProperties")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ExtraProperties");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("LastModificationTime");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("LastModifierId");

                    b.Property<long>("Value")
                        .HasColumnType("bigint");

                    b.HasKey("DefinitionId", "SessionUnitId");

                    b.HasIndex("SessionUnitId");

                    b.ToTable("Chat_SessionPermissionUnitGrant", (string)null);
                });

            modelBuilder.Entity("IczpNet.Chat.SessionSections.SessionRequests.SessionRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("ConcurrencyStamp");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreationTime");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CreatorId");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("DeleterId");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletionTime");

                    b.Property<long?>("DestinationId")
                        .HasColumnType("bigint");

                    b.Property<string>("DeviceId")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<DateTime?>("ExpirationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExtraProperties")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ExtraProperties");

                    b.Property<string>("HandleMessage")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("HandleTime")
                        .HasMaxLength(200)
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("HandlerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsAgreed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IsDeleted");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsExpired")
                        .HasColumnType("bit");

                    b.Property<bool>("IsHandled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("LastModificationTime");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("LastModifierId");

                    b.Property<long>("OwnerId")
                        .HasColumnType("bigint");

                    b.Property<string>("RequestMessage")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("DestinationId");

                    b.HasIndex("HandlerId");

                    b.HasIndex("OwnerId");

                    b.ToTable("Chat_SessionRequest", (string)null);
                });

            modelBuilder.Entity("IczpNet.Chat.SessionSections.SessionRoles.SessionRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("ConcurrencyStamp");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreationTime");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CreatorId");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("DeleterId");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletionTime");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ExtraProperties")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ExtraProperties");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("LastModificationTime");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("LastModifierId");

                    b.Property<string>("Name")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("SessionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("IsDefault")
                        .IsDescending();

                    b.HasIndex("SessionId");

                    b.ToTable("Chat_SessionRole", (string)null);
                });

            modelBuilder.Entity("IczpNet.Chat.SessionSections.SessionSettings.SessionSetting", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BackgroundImage")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("ConcurrencyStamp");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreationTime");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CreatorId");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("DeleterId");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletionTime");

                    b.Property<long?>("DestinationId")
                        .HasColumnType("bigint");

                    b.Property<string>("ExtraProperties")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ExtraProperties");

                    b.Property<bool>("IsCantacts")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IsDeleted");

                    b.Property<bool>("IsImmersed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsShowMemberName")
                        .HasColumnType("bit");

                    b.Property<bool>("IsShowRead")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("LastModificationTime");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("LastModifierId");

                    b.Property<long>("OwnerId")
                        .HasColumnType("bigint");

                    b.Property<string>("Remarks")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Rename")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long?>("SortingNumber")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("DestinationId");

                    b.HasIndex("OwnerId");

                    b.ToTable("Chat_SessionSetting", (string)null);
                });

            modelBuilder.Entity("IczpNet.Chat.SessionSections.SessionTags.SessionTag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("ConcurrencyStamp");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreationTime");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CreatorId");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("DeleterId");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletionTime");

                    b.Property<string>("ExtraProperties")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ExtraProperties");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("LastModificationTime");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("LastModifierId");

                    b.Property<string>("Name")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("SessionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("SessionId");

                    b.ToTable("Chat_SessionTag", (string)null);
                });

            modelBuilder.Entity("IczpNet.Chat.SessionSections.SessionUnitCounters.SessionUnitCounter", b =>
                {
                    b.Property<Guid>("SessionUnitId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreationTime");

                    b.Property<int>("FollowingCount")
                        .HasColumnType("int");

                    b.Property<long?>("LastMessageId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("LastModificationTime");

                    b.Property<int>("PrivateBadge")
                        .HasColumnType("int");

                    b.Property<int>("PublicBadge")
                        .HasColumnType("int");

                    b.Property<int>("RemindAllCount")
                        .HasColumnType("int");

                    b.Property<int>("RemindMeCount")
                        .HasColumnType("int");

                    b.HasKey("SessionUnitId");

                    b.HasIndex("LastMessageId")
                        .IsDescending();

                    b.HasIndex("SessionUnitId", "LastMessageId")
                        .IsDescending();

                    b.ToTable("Chat_SessionUnitCounter", (string)null);
                });

            modelBuilder.Entity("IczpNet.Chat.SessionSections.SessionUnitOrganizations.SessionUnitOrganization", b =>
                {
                    b.Property<Guid>("SessionUnitId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("SessionOrganizationId")
                        .HasColumnType("bigint");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("ConcurrencyStamp");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreationTime");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CreatorId");

                    b.Property<string>("ExtraProperties")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ExtraProperties");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("LastModificationTime");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("LastModifierId");

                    b.HasKey("SessionUnitId", "SessionOrganizationId");

                    b.HasIndex("SessionOrganizationId");

                    b.ToTable("Chat_SessionUnitOrganization", (string)null);
                });

            modelBuilder.Entity("IczpNet.Chat.SessionSections.SessionUnitRoles.SessionUnitRole", b =>
                {
                    b.Property<Guid>("SessionUnitId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SessionRoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("ConcurrencyStamp");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreationTime");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CreatorId");

                    b.Property<string>("ExtraProperties")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ExtraProperties");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("LastModificationTime");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("LastModifierId");

                    b.HasKey("SessionUnitId", "SessionRoleId");

                    b.HasIndex("SessionRoleId");

                    b.ToTable("Chat_SessionUnitRole", (string)null);
                });

            modelBuilder.Entity("IczpNet.Chat.SessionSections.SessionUnitSettings.SessionUnitSetting", b =>
                {
                    b.Property<Guid>("SessionUnitId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ClearTime")
                        .HasColumnType("datetime2")
                        .HasComment("清除历史消息最后时间,为null时则不限");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreationTime")
                        .HasComment("创建时间");

                    b.Property<DateTime?>("HistoryFristTime")
                        .HasColumnType("datetime2")
                        .HasComment("查看历史消息起始时间,为null时则不限");

                    b.Property<DateTime?>("HistoryLastTime")
                        .HasColumnType("datetime2")
                        .HasComment("查看历史消息截止时间,为null时则不限");

                    b.Property<Guid?>("InviterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsCantacts")
                        .HasColumnType("bit")
                        .HasComment("是否保存通讯录");

                    b.Property<bool>("IsCreator")
                        .HasColumnType("bit")
                        .HasComment("是否创建者（群主等）");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit")
                        .HasComment("是否可用");

                    b.Property<bool>("IsImmersed")
                        .HasColumnType("bit")
                        .HasComment("消息免打扰，默认为 false");

                    b.Property<bool>("IsInputEnabled")
                        .HasColumnType("bit")
                        .HasComment("是否启用输入框");

                    b.Property<bool>("IsKilled")
                        .HasColumnType("bit")
                        .HasComment("删除会话(退出群等)，但是不删除会话(用于查看历史消息)");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit")
                        .HasComment("是否公有成员");

                    b.Property<bool>("IsShowMemberName")
                        .HasColumnType("bit")
                        .HasComment("是否显示成员名称");

                    b.Property<bool>("IsShowReaded")
                        .HasColumnType("bit")
                        .HasComment("是否显示已读");

                    b.Property<bool>("IsStatic")
                        .HasColumnType("bit")
                        .HasComment("是否固定成员");

                    b.Property<DateTime?>("KillTime")
                        .HasColumnType("datetime2")
                        .HasComment("删除会话时间");

                    b.Property<int?>("KillType")
                        .HasColumnType("int");

                    b.Property<Guid?>("KillerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("LastModificationTime")
                        .HasComment("修改时间");

                    b.Property<string>("MemberName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("会话内的名称");

                    b.Property<long?>("ReadedMessageId")
                        .HasColumnType("bigint")
                        .HasComment("已读的消息");

                    b.Property<string>("Remarks")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("备注其他");

                    b.Property<DateTime?>("RemoveTime")
                        .HasColumnType("datetime2")
                        .HasComment("不显示消息会话(不退群,不删除消息)");

                    b.Property<string>("Rename")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("备注名称");

                    b.HasKey("SessionUnitId");

                    b.HasIndex("InviterId");

                    b.HasIndex("KillerId");

                    b.HasIndex("ReadedMessageId");

                    b.ToTable("Chat_SessionUnitSetting", (string)null);
                });

            modelBuilder.Entity("IczpNet.Chat.SessionSections.SessionUnitTags.SessionUnitTag", b =>
                {
                    b.Property<Guid>("SessionUnitId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SessionTagId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("ConcurrencyStamp");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreationTime");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CreatorId");

                    b.Property<string>("ExtraProperties")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ExtraProperties");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("LastModificationTime");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("LastModifierId");

                    b.HasKey("SessionUnitId", "SessionTagId");

                    b.HasIndex("SessionTagId");

                    b.ToTable("Chat_SessionUnitTag", (string)null);
                });

            modelBuilder.Entity("IczpNet.Chat.SessionSections.SessionUnits.SessionUnit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AppUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BackgroundImage")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("ClearTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("ConcurrencyStamp");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreationTime");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CreatorId");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("DeleterId");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletionTime");

                    b.Property<long?>("DestinationId")
                        .HasColumnType("bigint");

                    b.Property<string>("DestinationName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("DestinationNameSpellingAbbreviation")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("DestinationObjectType")
                        .HasColumnType("int");

                    b.Property<string>("ExtraProperties")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ExtraProperties");

                    b.Property<int>("FollowingCount")
                        .HasColumnType("int");

                    b.Property<DateTime?>("HistoryFristTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("HistoryLastTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("InviterId")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("InviterUnitId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsCantacts")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCreator")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IsDeleted");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsImmersed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsImportant")
                        .HasColumnType("bit");

                    b.Property<bool>("IsInputEnabled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsKilled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit");

                    b.Property<bool>("IsScoped")
                        .HasColumnType("bit");

                    b.Property<bool>("IsShowMemberName")
                        .HasColumnType("bit");

                    b.Property<bool>("IsShowReaded")
                        .HasColumnType("bit");

                    b.Property<bool>("IsStatic")
                        .HasColumnType("bit");

                    b.Property<int?>("JoinWay")
                        .HasColumnType("int");

                    b.Property<string>("Key")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("KillTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("KillType")
                        .HasColumnType("int");

                    b.Property<long?>("KillerId")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("KillerUnitId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long?>("LastMessageId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("LastModificationTime");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("LastModifierId");

                    b.Property<string>("MemberName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("MemberNameSpelling")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("MemberNameSpellingAbbreviation")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long>("OwnerId")
                        .HasColumnType("bigint");

                    b.Property<string>("OwnerName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("OwnerNameSpellingAbbreviation")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("OwnerObjectType")
                        .HasColumnType("int");

                    b.Property<int>("PrivateBadge")
                        .HasColumnType("int");

                    b.Property<int>("PublicBadge")
                        .HasColumnType("int");

                    b.Property<long?>("ReadedMessageId")
                        .HasColumnType("bigint");

                    b.Property<string>("Remarks")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("RemindAllCount")
                        .HasColumnType("int");

                    b.Property<int>("RemindMeCount")
                        .HasColumnType("int");

                    b.Property<DateTime?>("RemoveTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Rename")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("RenameSpelling")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("RenameSpellingAbbreviation")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("SessionId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Sorting")
                        .HasColumnType("float");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("DestinationId");

                    b.HasIndex("DestinationName")
                        .IsDescending();

                    b.HasIndex("DestinationNameSpellingAbbreviation")
                        .IsDescending();

                    b.HasIndex("DestinationObjectType")
                        .IsDescending();

                    b.HasIndex("InviterId");

                    b.HasIndex("InviterUnitId");

                    b.HasIndex("IsPublic")
                        .IsDescending();

                    b.HasIndex("IsStatic")
                        .IsDescending();

                    b.HasIndex("Key")
                        .IsDescending();

                    b.HasIndex("KillerId");

                    b.HasIndex("KillerUnitId");

                    b.HasIndex("LastMessageId")
                        .IsDescending();

                    b.HasIndex("MemberName")
                        .IsDescending();

                    b.HasIndex("MemberNameSpellingAbbreviation")
                        .IsDescending();

                    b.HasIndex("OwnerName")
                        .IsDescending();

                    b.HasIndex("OwnerNameSpellingAbbreviation")
                        .IsDescending();

                    b.HasIndex("ReadedMessageId")
                        .IsDescending();

                    b.HasIndex("Rename")
                        .IsDescending();

                    b.HasIndex("RenameSpellingAbbreviation")
                        .IsDescending();

                    b.HasIndex("SessionId");

                    b.HasIndex("Sorting")
                        .IsDescending();

                    b.HasIndex("OwnerId", "DestinationId")
                        .IsDescending();

                    b.HasIndex("Sorting", "LastMessageId")
                        .IsDescending();

                    b.HasIndex(new[] { "Sorting", "LastMessageId" }, "IX_Chat_SessionUnit_Sorting_Desc_LastMessageId_Asc")
                        .IsDescending(true, false);

                    b.ToTable("Chat_SessionUnit", (string)null);
                });

            modelBuilder.Entity("IczpNet.Chat.SessionSections.Sessions.Session", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Channel")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("ConcurrencyStamp");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreationTime");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CreatorId");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("DeleterId");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletionTime");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ExtraProperties")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ExtraProperties");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IsDeleted");

                    b.Property<long?>("LastMessageId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("LastModificationTime");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("LastModifierId");

                    b.Property<long?>("OwnerId")
                        .HasColumnType("bigint");

                    b.Property<string>("SessionKey")
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("TenantId");

                    b.Property<string>("Title")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("LastMessageId")
                        .IsDescending();

                    b.HasIndex("OwnerId");

                    b.HasIndex("SessionKey");

                    b.ToTable("Chat_Session", (string)null);
                });

            modelBuilder.Entity("IczpNet.Chat.TextContentWords.TextContentWord", b =>
                {
                    b.Property<Guid>("TextContentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("WordId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("ConcurrencyStamp");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreationTime");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CreatorId");

                    b.Property<string>("ExtraProperties")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ExtraProperties");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("LastModificationTime");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("LastModifierId");

                    b.HasKey("TextContentId", "WordId");

                    b.HasIndex("WordId");

                    b.ToTable("Chat_TextContentWord", (string)null);
                });

            modelBuilder.Entity("IczpNet.Chat.Wallets.PaymentPlatform", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("ConcurrencyStamp");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreationTime");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CreatorId");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("DeleterId");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletionTime");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ExtraProperties")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ExtraProperties");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IsDeleted");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsStatic")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("LastModificationTime");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("LastModifierId");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("TenantId");

                    b.HasKey("Id");

                    b.ToTable("Chat_PaymentPlatform", (string)null);
                });

            modelBuilder.Entity("IczpNet.Chat.Wallets.Wallet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AppUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("AvailableAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("ConcurrencyStamp");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreationTime");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CreatorId");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("DeleterId");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletionTime");

                    b.Property<string>("ExtraProperties")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ExtraProperties");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("LastModificationTime");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("LastModifierId");

                    b.Property<decimal>("LockAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("OwnerId")
                        .HasColumnType("bigint");

                    b.Property<string>("Password")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("TenantId");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Chat_Wallet", (string)null);
                });

            modelBuilder.Entity("IczpNet.Chat.Wallets.WalletBusiness", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("BusinessType")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("ConcurrencyStamp");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreationTime");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CreatorId");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("DeleterId");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletionTime");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ExtraProperties")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ExtraProperties");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IsDeleted");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsStatic")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("LastModificationTime");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("LastModifierId");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("TenantId");

                    b.HasKey("Id");

                    b.ToTable("Chat_WalletBusiness", (string)null);
                });

            modelBuilder.Entity("IczpNet.Chat.Wallets.WalletRecorder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("AutoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("AutoId"));

                    b.Property<decimal>("AvailableAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("AvailableAmountBeforeChange")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("ConcurrencyStamp");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreationTime");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CreatorId");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("DeleterId");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletionTime");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ExtraProperties")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ExtraProperties");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("LastModificationTime");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("LastModifierId");

                    b.Property<decimal>("LockAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("LockAmountBeforeChange")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long?>("OwnerId")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("TenantId");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalAmountBeforeChange")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("WalletBusinessId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("WalletBusinessType")
                        .HasColumnType("int");

                    b.Property<Guid?>("WalletId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.HasIndex("WalletBusinessId");

                    b.HasIndex("WalletId");

                    b.ToTable("Chat_WalletRecorder", (string)null);
                });

            modelBuilder.Entity("IczpNet.Chat.Wallets.WalletRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("ConcurrencyStamp");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreationTime");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CreatorId");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("DeleterId");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletionTime");

                    b.Property<string>("Descripton")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ExtraProperties")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ExtraProperties");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IsDeleted");

                    b.Property<bool>("IsPosting")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("LastModificationTime");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("LastModifierId");

                    b.Property<long>("OwnerId")
                        .HasColumnType("bigint");

                    b.Property<string>("PaymentPlatformId")
                        .HasColumnType("nvarchar(64)");

                    b.Property<DateTime?>("PostDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("TenantId");

                    b.Property<string>("WalletBusinessId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("WalletRecorderId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.HasIndex("PaymentPlatformId");

                    b.HasIndex("WalletBusinessId");

                    b.HasIndex("WalletRecorderId");

                    b.ToTable("Chat_WalletRequest", (string)null);
                });

            modelBuilder.Entity("IczpNet.Chat.Words.Word", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("ConcurrencyStamp");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreationTime");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CreatorId");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("DeleterId");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletionTime");

                    b.Property<string>("ExtraProperties")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ExtraProperties");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IsDeleted");

                    b.Property<bool>("IsDirty")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("LastModificationTime");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("LastModifierId");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("TenantId");

                    b.Property<string>("Value")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.HasKey("Id");

                    b.HasIndex("Value")
                        .IsDescending();

                    b.ToTable("Chat_Word", (string)null);
                });

            modelBuilder.Entity("ImageContentMessage", b =>
                {
                    b.Property<Guid>("ImageContentListId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("MessageListId")
                        .HasColumnType("bigint");

                    b.HasKey("ImageContentListId", "MessageListId");

                    b.HasIndex("MessageListId");

                    b.ToTable("Chat_Message_MapTo_ImageContent", (string)null);
                });

            modelBuilder.Entity("LinkContentMessage", b =>
                {
                    b.Property<Guid>("LinkContentListId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("MessageListId")
                        .HasColumnType("bigint");

                    b.HasKey("LinkContentListId", "MessageListId");

                    b.HasIndex("MessageListId");

                    b.ToTable("Chat_Message_MapTo_LinkContent", (string)null);
                });

            modelBuilder.Entity("LocationContentMessage", b =>
                {
                    b.Property<Guid>("LocationContentListId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("MessageListId")
                        .HasColumnType("bigint");

                    b.HasKey("LocationContentListId", "MessageListId");

                    b.HasIndex("MessageListId");

                    b.ToTable("Chat_Message_MapTo_LocationContent", (string)null);
                });

            modelBuilder.Entity("MessageRedEnvelopeContent", b =>
                {
                    b.Property<long>("MessageListId")
                        .HasColumnType("bigint");

                    b.Property<Guid>("RedEnvelopeContentListId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("MessageListId", "RedEnvelopeContentListId");

                    b.HasIndex("RedEnvelopeContentListId");

                    b.ToTable("Chat_Message_MapTo_RedEnvelopeContent", (string)null);
                });

            modelBuilder.Entity("MessageSoundContent", b =>
                {
                    b.Property<long>("MessageListId")
                        .HasColumnType("bigint");

                    b.Property<Guid>("SoundContentListId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("MessageListId", "SoundContentListId");

                    b.HasIndex("SoundContentListId");

                    b.ToTable("Chat_Message_MapTo_SoundContent", (string)null);
                });

            modelBuilder.Entity("MessageTextContent", b =>
                {
                    b.Property<long>("MessageListId")
                        .HasColumnType("bigint");

                    b.Property<Guid>("TextContentListId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("MessageListId", "TextContentListId");

                    b.HasIndex("TextContentListId");

                    b.ToTable("Chat_Message_MapTo_TextContent", (string)null);
                });

            modelBuilder.Entity("MessageVideoContent", b =>
                {
                    b.Property<long>("MessageListId")
                        .HasColumnType("bigint");

                    b.Property<Guid>("VideoContentListId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("MessageListId", "VideoContentListId");

                    b.HasIndex("VideoContentListId");

                    b.ToTable("Chat_Message_MapTo_VideoContent", (string)null);
                });

            modelBuilder.Entity("ArticleContentMessage", b =>
                {
                    b.HasOne("IczpNet.Chat.MessageSections.Templates.ArticleContent", null)
                        .WithMany()
                        .HasForeignKey("ArticleContentListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IczpNet.Chat.MessageSections.Messages.Message", null)
                        .WithMany()
                        .HasForeignKey("MessageListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CmdContentMessage", b =>
                {
                    b.HasOne("IczpNet.Chat.MessageSections.Templates.CmdContent", null)
                        .WithMany()
                        .HasForeignKey("CmdContentListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IczpNet.Chat.MessageSections.Messages.Message", null)
                        .WithMany()
                        .HasForeignKey("MessageListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ContactsContentMessage", b =>
                {
                    b.HasOne("IczpNet.Chat.MessageSections.Templates.ContactsContent", null)
                        .WithMany()
                        .HasForeignKey("ContactsContentListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IczpNet.Chat.MessageSections.Messages.Message", null)
                        .WithMany()
                        .HasForeignKey("MessageListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FileContentMessage", b =>
                {
                    b.HasOne("IczpNet.Chat.MessageSections.Templates.FileContent", null)
                        .WithMany()
                        .HasForeignKey("FileContentListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IczpNet.Chat.MessageSections.Messages.Message", null)
                        .WithMany()
                        .HasForeignKey("MessageListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HistoryContentMessage", b =>
                {
                    b.HasOne("IczpNet.Chat.MessageSections.Templates.HistoryContent", null)
                        .WithMany()
                        .HasForeignKey("HistoryContentListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IczpNet.Chat.MessageSections.Messages.Message", null)
                        .WithMany()
                        .HasForeignKey("MessageListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HtmlContentMessage", b =>
                {
                    b.HasOne("IczpNet.Chat.MessageSections.Templates.HtmlContent", null)
                        .WithMany()
                        .HasForeignKey("HtmlContentListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IczpNet.Chat.MessageSections.Messages.Message", null)
                        .WithMany()
                        .HasForeignKey("MessageListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IczpNet.Chat.Articles.ArticleMessage", b =>
                {
                    b.HasOne("IczpNet.Chat.Articles.Article", "Article")
                        .WithMany("MessageList")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IczpNet.Chat.MessageSections.Messages.Message", "Message")
                        .WithMany()
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Article");

                    b.Navigation("Message");
                });

            modelBuilder.Entity("IczpNet.Chat.ChatObjectCategoryUnits.ChatObjectCategoryUnit", b =>
                {
                    b.HasOne("IczpNet.Chat.ChatObjectCategorys.ChatObjectCategory", "Category")
                        .WithMany("ChatObjectCategoryUnitList")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IczpNet.Chat.ChatObjects.ChatObject", "ChatObject")
                        .WithMany("ChatObjectCategoryUnitList")
                        .HasForeignKey("ChatObjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("ChatObject");
                });

            modelBuilder.Entity("IczpNet.Chat.ChatObjectCategorys.ChatObjectCategory", b =>
                {
                    b.HasOne("IczpNet.Chat.ChatObjectTypes.ChatObjectType", "ChatObjectType")
                        .WithMany("ChatObjectCategoryList")
                        .HasForeignKey("ChatObjectTypeId");

                    b.HasOne("IczpNet.Chat.ChatObjectCategorys.ChatObjectCategory", "Parent")
                        .WithMany("Childs")
                        .HasForeignKey("ParentId");

                    b.Navigation("ChatObjectType");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("IczpNet.Chat.ChatObjects.ChatObject", b =>
                {
                    b.HasOne("IczpNet.Chat.ChatObjectTypes.ChatObjectType", "ChatObjectType")
                        .WithMany("ChatObjectList")
                        .HasForeignKey("ChatObjectTypeId");

                    b.HasOne("IczpNet.Chat.Mottos.Motto", "Motto")
                        .WithMany("ChatObjectList")
                        .HasForeignKey("MottoId");

                    b.HasOne("IczpNet.Chat.ChatObjects.ChatObject", "Parent")
                        .WithMany("Childs")
                        .HasForeignKey("ParentId");

                    b.Navigation("ChatObjectType");

                    b.Navigation("Motto");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("IczpNet.Chat.Favorites.Favorite", b =>
                {
                    b.HasOne("IczpNet.Chat.ChatObjects.ChatObject", "Destination")
                        .WithMany()
                        .HasForeignKey("DestinationId");

                    b.HasOne("IczpNet.Chat.MessageSections.Messages.Message", "Message")
                        .WithMany("FavoriteList")
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IczpNet.Chat.ChatObjects.ChatObject", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId");

                    b.HasOne("IczpNet.Chat.SessionSections.SessionUnits.SessionUnit", "SessionUnit")
                        .WithMany("FavoriteList")
                        .HasForeignKey("SessionUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Destination");

                    b.Navigation("Message");

                    b.Navigation("Owner");

                    b.Navigation("SessionUnit");
                });

            modelBuilder.Entity("IczpNet.Chat.Follows.Follow", b =>
                {
                    b.HasOne("IczpNet.Chat.SessionSections.SessionUnits.SessionUnit", "Owner")
                        .WithMany("OwnerFollowList")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("IczpNet.Chat.MessageSections.Counters.FavoritedCounter", b =>
                {
                    b.HasOne("IczpNet.Chat.MessageSections.Messages.Message", "Message")
                        .WithOne("FavoritedCounter")
                        .HasForeignKey("IczpNet.Chat.MessageSections.Counters.FavoritedCounter", "MessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Message");
                });

            modelBuilder.Entity("IczpNet.Chat.MessageSections.Counters.OpenedCounter", b =>
                {
                    b.HasOne("IczpNet.Chat.MessageSections.Messages.Message", "Message")
                        .WithOne("OpenedCounter")
                        .HasForeignKey("IczpNet.Chat.MessageSections.Counters.OpenedCounter", "MessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Message");
                });

            modelBuilder.Entity("IczpNet.Chat.MessageSections.Counters.ReadedCounter", b =>
                {
                    b.HasOne("IczpNet.Chat.MessageSections.Messages.Message", "Message")
                        .WithOne("ReadedCounter")
                        .HasForeignKey("IczpNet.Chat.MessageSections.Counters.ReadedCounter", "MessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Message");
                });

            modelBuilder.Entity("IczpNet.Chat.MessageSections.MessageReminders.MessageReminder", b =>
                {
                    b.HasOne("IczpNet.Chat.MessageSections.Messages.Message", "Message")
                        .WithMany("MessageReminderList")
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IczpNet.Chat.SessionSections.SessionUnits.SessionUnit", "SessionUnit")
                        .WithMany("ReminderList")
                        .HasForeignKey("SessionUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Message");

                    b.Navigation("SessionUnit");
                });

            modelBuilder.Entity("IczpNet.Chat.MessageSections.Messages.Message", b =>
                {
                    b.HasOne("IczpNet.Chat.MessageSections.Messages.Message", "ForwardMessage")
                        .WithMany("ForwardedMessageList")
                        .HasForeignKey("ForwardMessageId");

                    b.HasOne("IczpNet.Chat.MessageSections.MessageContents.MessageContent", "MessageContent")
                        .WithMany("MessageList")
                        .HasForeignKey("MessageContentId");

                    b.HasOne("IczpNet.Chat.MessageSections.Messages.Message", "QuoteMessage")
                        .WithMany("QuotedMessageList")
                        .HasForeignKey("QuoteMessageId");

                    b.HasOne("IczpNet.Chat.ChatObjects.ChatObject", "Receiver")
                        .WithMany("ReceiverMessageList")
                        .HasForeignKey("ReceiverId");

                    b.HasOne("IczpNet.Chat.ChatObjects.ChatObject", "Sender")
                        .WithMany("SenderMessageList")
                        .HasForeignKey("SenderId");

                    b.HasOne("IczpNet.Chat.SessionSections.Sessions.Session", "Session")
                        .WithMany("MessageList")
                        .HasForeignKey("SessionId");

                    b.HasOne("IczpNet.Chat.SessionSections.SessionUnits.SessionUnit", "SessionUnit")
                        .WithMany("MessageList")
                        .HasForeignKey("SessionUnitId");

                    b.Navigation("ForwardMessage");

                    b.Navigation("MessageContent");

                    b.Navigation("QuoteMessage");

                    b.Navigation("Receiver");

                    b.Navigation("Sender");

                    b.Navigation("Session");

                    b.Navigation("SessionUnit");
                });

            modelBuilder.Entity("IczpNet.Chat.MessageSections.Templates.ArticleContent", b =>
                {
                    b.HasOne("IczpNet.Chat.ChatObjects.ChatObject", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("IczpNet.Chat.MessageSections.Templates.CmdContent", b =>
                {
                    b.HasOne("IczpNet.Chat.ChatObjects.ChatObject", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("IczpNet.Chat.MessageSections.Templates.ContactsContent", b =>
                {
                    b.HasOne("IczpNet.Chat.ChatObjects.ChatObject", "Destination")
                        .WithMany()
                        .HasForeignKey("DestinationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IczpNet.Chat.ChatObjects.ChatObject", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId");

                    b.Navigation("Destination");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("IczpNet.Chat.MessageSections.Templates.FileContent", b =>
                {
                    b.HasOne("IczpNet.Chat.ChatObjects.ChatObject", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("IczpNet.Chat.MessageSections.Templates.HistoryContent", b =>
                {
                    b.HasOne("IczpNet.Chat.ChatObjects.ChatObject", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("IczpNet.Chat.MessageSections.Templates.HistoryMessage", b =>
                {
                    b.HasOne("IczpNet.Chat.MessageSections.Templates.HistoryContent", "HistoryContent")
                        .WithMany()
                        .HasForeignKey("HistoryContentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IczpNet.Chat.MessageSections.Messages.Message", "Message")
                        .WithMany("HistoryMessageList")
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HistoryContent");

                    b.Navigation("Message");
                });

            modelBuilder.Entity("IczpNet.Chat.MessageSections.Templates.HtmlContent", b =>
                {
                    b.HasOne("IczpNet.Chat.ChatObjects.ChatObject", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("IczpNet.Chat.MessageSections.Templates.ImageContent", b =>
                {
                    b.HasOne("IczpNet.Chat.ChatObjects.ChatObject", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("IczpNet.Chat.MessageSections.Templates.LinkContent", b =>
                {
                    b.HasOne("IczpNet.Chat.ChatObjects.ChatObject", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("IczpNet.Chat.MessageSections.Templates.LocationContent", b =>
                {
                    b.HasOne("IczpNet.Chat.ChatObjects.ChatObject", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("IczpNet.Chat.MessageSections.Templates.SoundContent", b =>
                {
                    b.HasOne("IczpNet.Chat.ChatObjects.ChatObject", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("IczpNet.Chat.MessageSections.Templates.TextContent", b =>
                {
                    b.HasOne("IczpNet.Chat.ChatObjects.ChatObject", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("IczpNet.Chat.MessageSections.Templates.VideoContent", b =>
                {
                    b.HasOne("IczpNet.Chat.ChatObjects.ChatObject", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("IczpNet.Chat.Mottos.Motto", b =>
                {
                    b.HasOne("IczpNet.Chat.ChatObjects.ChatObject", "Owner")
                        .WithMany("MottoList")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("IczpNet.Chat.OpenedRecorders.OpenedRecorder", b =>
                {
                    b.HasOne("IczpNet.Chat.ChatObjects.ChatObject", "Destination")
                        .WithMany()
                        .HasForeignKey("DestinationId");

                    b.HasOne("IczpNet.Chat.MessageSections.Messages.Message", "Message")
                        .WithMany("OpenedRecorderList")
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IczpNet.Chat.ChatObjects.ChatObject", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId");

                    b.HasOne("IczpNet.Chat.SessionSections.SessionUnits.SessionUnit", "SessionUnit")
                        .WithMany("OpenedRecorderList")
                        .HasForeignKey("SessionUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Destination");

                    b.Navigation("Message");

                    b.Navigation("Owner");

                    b.Navigation("SessionUnit");
                });

            modelBuilder.Entity("IczpNet.Chat.ReadedRecorders.ReadedRecorder", b =>
                {
                    b.HasOne("IczpNet.Chat.ChatObjects.ChatObject", "Destination")
                        .WithMany()
                        .HasForeignKey("DestinationId");

                    b.HasOne("IczpNet.Chat.MessageSections.Messages.Message", "Message")
                        .WithMany("ReadedRecorderList")
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IczpNet.Chat.ChatObjects.ChatObject", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId");

                    b.HasOne("IczpNet.Chat.SessionSections.SessionUnits.SessionUnit", "SessionUnit")
                        .WithMany("ReadedRecorderList")
                        .HasForeignKey("SessionUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Destination");

                    b.Navigation("Message");

                    b.Navigation("Owner");

                    b.Navigation("SessionUnit");
                });

            modelBuilder.Entity("IczpNet.Chat.RedEnvelopes.RedEnvelopeContent", b =>
                {
                    b.HasOne("IczpNet.Chat.ChatObjects.ChatObject", "Owner")
                        .WithMany("RedEnvelopeContentList")
                        .HasForeignKey("OwnerId");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("IczpNet.Chat.RedEnvelopes.RedEnvelopeUnit", b =>
                {
                    b.HasOne("IczpNet.Chat.ChatObjects.ChatObject", "Owner")
                        .WithMany("RedEnvelopeUnitList")
                        .HasForeignKey("OwnerId");

                    b.HasOne("IczpNet.Chat.RedEnvelopes.RedEnvelopeContent", "RedEnvelopeContent")
                        .WithMany("RedEnvelopeUnitList")
                        .HasForeignKey("RedEnvelopeContentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");

                    b.Navigation("RedEnvelopeContent");
                });

            modelBuilder.Entity("IczpNet.Chat.Scopeds.Scoped", b =>
                {
                    b.HasOne("IczpNet.Chat.MessageSections.Messages.Message", "Message")
                        .WithMany("ScopedList")
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IczpNet.Chat.SessionSections.SessionUnits.SessionUnit", "SessionUnit")
                        .WithMany()
                        .HasForeignKey("SessionUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Message");

                    b.Navigation("SessionUnit");
                });

            modelBuilder.Entity("IczpNet.Chat.SessionSections.FriendshipRequests.FriendshipRequest", b =>
                {
                    b.HasOne("IczpNet.Chat.ChatObjects.ChatObject", "Destination")
                        .WithMany("DestinationFriendshipRequestList")
                        .HasForeignKey("DestinationId");

                    b.HasOne("IczpNet.Chat.ChatObjects.ChatObject", "Owner")
                        .WithMany("OwnerFriendshipRequestList")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Destination");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("IczpNet.Chat.SessionSections.FriendshipTagUnits.FriendshipTagUnit", b =>
                {
                    b.HasOne("IczpNet.Chat.SessionSections.Friendships.Friendship", "Friendship")
                        .WithMany("FriendshipTagUnitList")
                        .HasForeignKey("FriendshipId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IczpNet.Chat.SessionSections.Friendships.FriendshipTag", "FriendshipTag")
                        .WithMany("FriendshipList")
                        .HasForeignKey("FriendshipTagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Friendship");

                    b.Navigation("FriendshipTag");
                });

            modelBuilder.Entity("IczpNet.Chat.SessionSections.Friendships.Friendship", b =>
                {
                    b.HasOne("IczpNet.Chat.ChatObjects.ChatObject", "Destination")
                        .WithMany("DestinationFriendshipList")
                        .HasForeignKey("DestinationId");

                    b.HasOne("IczpNet.Chat.ChatObjects.ChatObject", "Owner")
                        .WithMany("OwnerFriendshipList")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IczpNet.Chat.SessionSections.FriendshipRequests.FriendshipRequest", "FriendshipRequest")
                        .WithMany("FriendshipList")
                        .HasForeignKey("RequestId");

                    b.Navigation("Destination");

                    b.Navigation("FriendshipRequest");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("IczpNet.Chat.SessionSections.Friendships.FriendshipTag", b =>
                {
                    b.HasOne("IczpNet.Chat.ChatObjects.ChatObject", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("IczpNet.Chat.SessionSections.SessionOrganizations.SessionOrganization", b =>
                {
                    b.HasOne("IczpNet.Chat.SessionSections.SessionOrganizations.SessionOrganization", "Parent")
                        .WithMany("Childs")
                        .HasForeignKey("ParentId");

                    b.HasOne("IczpNet.Chat.SessionSections.Sessions.Session", "Session")
                        .WithMany()
                        .HasForeignKey("SessionId");

                    b.Navigation("Parent");

                    b.Navigation("Session");
                });

            modelBuilder.Entity("IczpNet.Chat.SessionSections.SessionPermissionDefinitions.SessionPermissionDefinition", b =>
                {
                    b.HasOne("IczpNet.Chat.SessionSections.SessionPermissionGroups.SessionPermissionGroup", "Group")
                        .WithMany("DefinitionList")
                        .HasForeignKey("GroupId");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("IczpNet.Chat.SessionSections.SessionPermissionGroups.SessionPermissionGroup", b =>
                {
                    b.HasOne("IczpNet.Chat.SessionSections.SessionPermissionGroups.SessionPermissionGroup", "Parent")
                        .WithMany("Childs")
                        .HasForeignKey("ParentId");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("IczpNet.Chat.SessionSections.SessionPermissionRoleGrants.SessionPermissionRoleGrant", b =>
                {
                    b.HasOne("IczpNet.Chat.SessionSections.SessionPermissionDefinitions.SessionPermissionDefinition", "Definition")
                        .WithMany("RoleGrantList")
                        .HasForeignKey("DefinitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IczpNet.Chat.SessionSections.SessionRoles.SessionRole", "Role")
                        .WithMany("GrantList")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Definition");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("IczpNet.Chat.SessionSections.SessionPermissionRoleGrants.SessionPermissionUnitGrant", b =>
                {
                    b.HasOne("IczpNet.Chat.SessionSections.SessionPermissionDefinitions.SessionPermissionDefinition", "Definition")
                        .WithMany("UnitGrantList")
                        .HasForeignKey("DefinitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IczpNet.Chat.SessionSections.SessionUnits.SessionUnit", "SessionUnit")
                        .WithMany("GrantList")
                        .HasForeignKey("SessionUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Definition");

                    b.Navigation("SessionUnit");
                });

            modelBuilder.Entity("IczpNet.Chat.SessionSections.SessionRequests.SessionRequest", b =>
                {
                    b.HasOne("IczpNet.Chat.ChatObjects.ChatObject", "Destination")
                        .WithMany()
                        .HasForeignKey("DestinationId");

                    b.HasOne("IczpNet.Chat.SessionSections.SessionUnits.SessionUnit", "Handler")
                        .WithMany("HandlerList")
                        .HasForeignKey("HandlerId");

                    b.HasOne("IczpNet.Chat.ChatObjects.ChatObject", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Destination");

                    b.Navigation("Handler");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("IczpNet.Chat.SessionSections.SessionRoles.SessionRole", b =>
                {
                    b.HasOne("IczpNet.Chat.SessionSections.Sessions.Session", "Session")
                        .WithMany("RoleList")
                        .HasForeignKey("SessionId");

                    b.Navigation("Session");
                });

            modelBuilder.Entity("IczpNet.Chat.SessionSections.SessionSettings.SessionSetting", b =>
                {
                    b.HasOne("IczpNet.Chat.ChatObjects.ChatObject", "Destination")
                        .WithMany("DestinationSessionSettingList")
                        .HasForeignKey("DestinationId");

                    b.HasOne("IczpNet.Chat.ChatObjects.ChatObject", "Owner")
                        .WithMany("OwnerSessionSettingList")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Destination");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("IczpNet.Chat.SessionSections.SessionTags.SessionTag", b =>
                {
                    b.HasOne("IczpNet.Chat.SessionSections.Sessions.Session", "Session")
                        .WithMany("TagList")
                        .HasForeignKey("SessionId");

                    b.Navigation("Session");
                });

            modelBuilder.Entity("IczpNet.Chat.SessionSections.SessionUnitCounters.SessionUnitCounter", b =>
                {
                    b.HasOne("IczpNet.Chat.MessageSections.Messages.Message", "LastMessage")
                        .WithMany()
                        .HasForeignKey("LastMessageId");

                    b.HasOne("IczpNet.Chat.SessionSections.SessionUnits.SessionUnit", "SessionUnit")
                        .WithOne("Counter")
                        .HasForeignKey("IczpNet.Chat.SessionSections.SessionUnitCounters.SessionUnitCounter", "SessionUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LastMessage");

                    b.Navigation("SessionUnit");
                });

            modelBuilder.Entity("IczpNet.Chat.SessionSections.SessionUnitOrganizations.SessionUnitOrganization", b =>
                {
                    b.HasOne("IczpNet.Chat.SessionSections.SessionOrganizations.SessionOrganization", "SessionOrganization")
                        .WithMany("SessionUnitOrganizationList")
                        .HasForeignKey("SessionOrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IczpNet.Chat.SessionSections.SessionUnits.SessionUnit", "SessionUnit")
                        .WithMany("SessionUnitOrganizationList")
                        .HasForeignKey("SessionUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SessionOrganization");

                    b.Navigation("SessionUnit");
                });

            modelBuilder.Entity("IczpNet.Chat.SessionSections.SessionUnitRoles.SessionUnitRole", b =>
                {
                    b.HasOne("IczpNet.Chat.SessionSections.SessionRoles.SessionRole", "SessionRole")
                        .WithMany("SessionUnitRoleList")
                        .HasForeignKey("SessionRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IczpNet.Chat.SessionSections.SessionUnits.SessionUnit", "SessionUnit")
                        .WithMany("SessionUnitRoleList")
                        .HasForeignKey("SessionUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SessionRole");

                    b.Navigation("SessionUnit");
                });

            modelBuilder.Entity("IczpNet.Chat.SessionSections.SessionUnitSettings.SessionUnitSetting", b =>
                {
                    b.HasOne("IczpNet.Chat.SessionSections.SessionUnits.SessionUnit", "Inviter")
                        .WithMany("InviterList")
                        .HasForeignKey("InviterId");

                    b.HasOne("IczpNet.Chat.SessionSections.SessionUnits.SessionUnit", "Killer")
                        .WithMany("KillerList")
                        .HasForeignKey("KillerId");

                    b.HasOne("IczpNet.Chat.MessageSections.Messages.Message", "ReadedMessage")
                        .WithMany()
                        .HasForeignKey("ReadedMessageId");

                    b.HasOne("IczpNet.Chat.SessionSections.SessionUnits.SessionUnit", "SessionUnit")
                        .WithOne("Setting")
                        .HasForeignKey("IczpNet.Chat.SessionSections.SessionUnitSettings.SessionUnitSetting", "SessionUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Inviter");

                    b.Navigation("Killer");

                    b.Navigation("ReadedMessage");

                    b.Navigation("SessionUnit");
                });

            modelBuilder.Entity("IczpNet.Chat.SessionSections.SessionUnitTags.SessionUnitTag", b =>
                {
                    b.HasOne("IczpNet.Chat.SessionSections.SessionTags.SessionTag", "SessionTag")
                        .WithMany("SessionUnitTagList")
                        .HasForeignKey("SessionTagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IczpNet.Chat.SessionSections.SessionUnits.SessionUnit", "SessionUnit")
                        .WithMany("SessionUnitTagList")
                        .HasForeignKey("SessionUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SessionTag");

                    b.Navigation("SessionUnit");
                });

            modelBuilder.Entity("IczpNet.Chat.SessionSections.SessionUnits.SessionUnit", b =>
                {
                    b.HasOne("IczpNet.Chat.ChatObjects.ChatObject", "Destination")
                        .WithMany("DestinationSessionUnitList")
                        .HasForeignKey("DestinationId");

                    b.HasOne("IczpNet.Chat.ChatObjects.ChatObject", "Inviter")
                        .WithMany("InviterSessionUnitList")
                        .HasForeignKey("InviterId");

                    b.HasOne("IczpNet.Chat.SessionSections.SessionUnits.SessionUnit", "InviterUnit")
                        .WithMany("InviterUnitList")
                        .HasForeignKey("InviterUnitId");

                    b.HasOne("IczpNet.Chat.ChatObjects.ChatObject", "Killer")
                        .WithMany("KillerSessionUnitList")
                        .HasForeignKey("KillerId");

                    b.HasOne("IczpNet.Chat.SessionSections.SessionUnits.SessionUnit", "KillerUnit")
                        .WithMany("KillerUnitList")
                        .HasForeignKey("KillerUnitId");

                    b.HasOne("IczpNet.Chat.MessageSections.Messages.Message", "LastMessage")
                        .WithMany("LastMessageSessionUnitList")
                        .HasForeignKey("LastMessageId");

                    b.HasOne("IczpNet.Chat.ChatObjects.ChatObject", "Owner")
                        .WithMany("OwnerSessionUnitList")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IczpNet.Chat.MessageSections.Messages.Message", "ReadedMessage")
                        .WithMany("ReadedMessageSessionUnitList")
                        .HasForeignKey("ReadedMessageId");

                    b.HasOne("IczpNet.Chat.SessionSections.Sessions.Session", "Session")
                        .WithMany("UnitList")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Destination");

                    b.Navigation("Inviter");

                    b.Navigation("InviterUnit");

                    b.Navigation("Killer");

                    b.Navigation("KillerUnit");

                    b.Navigation("LastMessage");

                    b.Navigation("Owner");

                    b.Navigation("ReadedMessage");

                    b.Navigation("Session");
                });

            modelBuilder.Entity("IczpNet.Chat.SessionSections.Sessions.Session", b =>
                {
                    b.HasOne("IczpNet.Chat.MessageSections.Messages.Message", "LastMessage")
                        .WithMany("SessionList")
                        .HasForeignKey("LastMessageId");

                    b.HasOne("IczpNet.Chat.ChatObjects.ChatObject", "Owner")
                        .WithMany("OwnerSessionList")
                        .HasForeignKey("OwnerId");

                    b.Navigation("LastMessage");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("IczpNet.Chat.TextContentWords.TextContentWord", b =>
                {
                    b.HasOne("IczpNet.Chat.MessageSections.Templates.TextContent", "TextContent")
                        .WithMany()
                        .HasForeignKey("TextContentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IczpNet.Chat.Words.Word", "Word")
                        .WithMany()
                        .HasForeignKey("WordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TextContent");

                    b.Navigation("Word");
                });

            modelBuilder.Entity("IczpNet.Chat.Wallets.Wallet", b =>
                {
                    b.HasOne("IczpNet.Chat.ChatObjects.ChatObject", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("IczpNet.Chat.Wallets.WalletRecorder", b =>
                {
                    b.HasOne("IczpNet.Chat.ChatObjects.ChatObject", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId");

                    b.HasOne("IczpNet.Chat.Wallets.WalletBusiness", "WalletBusiness")
                        .WithMany("WalletRecorderList")
                        .HasForeignKey("WalletBusinessId");

                    b.HasOne("IczpNet.Chat.Wallets.Wallet", "Wallet")
                        .WithMany("WalletRecorderList")
                        .HasForeignKey("WalletId");

                    b.Navigation("Owner");

                    b.Navigation("Wallet");

                    b.Navigation("WalletBusiness");
                });

            modelBuilder.Entity("IczpNet.Chat.Wallets.WalletRequest", b =>
                {
                    b.HasOne("IczpNet.Chat.ChatObjects.ChatObject", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IczpNet.Chat.Wallets.PaymentPlatform", "PaymentPlatform")
                        .WithMany()
                        .HasForeignKey("PaymentPlatformId");

                    b.HasOne("IczpNet.Chat.Wallets.WalletBusiness", "WalletBusiness")
                        .WithMany()
                        .HasForeignKey("WalletBusinessId");

                    b.HasOne("IczpNet.Chat.Wallets.WalletRecorder", "WalletRecorder")
                        .WithMany()
                        .HasForeignKey("WalletRecorderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");

                    b.Navigation("PaymentPlatform");

                    b.Navigation("WalletBusiness");

                    b.Navigation("WalletRecorder");
                });

            modelBuilder.Entity("ImageContentMessage", b =>
                {
                    b.HasOne("IczpNet.Chat.MessageSections.Templates.ImageContent", null)
                        .WithMany()
                        .HasForeignKey("ImageContentListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IczpNet.Chat.MessageSections.Messages.Message", null)
                        .WithMany()
                        .HasForeignKey("MessageListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LinkContentMessage", b =>
                {
                    b.HasOne("IczpNet.Chat.MessageSections.Templates.LinkContent", null)
                        .WithMany()
                        .HasForeignKey("LinkContentListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IczpNet.Chat.MessageSections.Messages.Message", null)
                        .WithMany()
                        .HasForeignKey("MessageListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LocationContentMessage", b =>
                {
                    b.HasOne("IczpNet.Chat.MessageSections.Templates.LocationContent", null)
                        .WithMany()
                        .HasForeignKey("LocationContentListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IczpNet.Chat.MessageSections.Messages.Message", null)
                        .WithMany()
                        .HasForeignKey("MessageListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MessageRedEnvelopeContent", b =>
                {
                    b.HasOne("IczpNet.Chat.MessageSections.Messages.Message", null)
                        .WithMany()
                        .HasForeignKey("MessageListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IczpNet.Chat.RedEnvelopes.RedEnvelopeContent", null)
                        .WithMany()
                        .HasForeignKey("RedEnvelopeContentListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MessageSoundContent", b =>
                {
                    b.HasOne("IczpNet.Chat.MessageSections.Messages.Message", null)
                        .WithMany()
                        .HasForeignKey("MessageListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IczpNet.Chat.MessageSections.Templates.SoundContent", null)
                        .WithMany()
                        .HasForeignKey("SoundContentListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MessageTextContent", b =>
                {
                    b.HasOne("IczpNet.Chat.MessageSections.Messages.Message", null)
                        .WithMany()
                        .HasForeignKey("MessageListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IczpNet.Chat.MessageSections.Templates.TextContent", null)
                        .WithMany()
                        .HasForeignKey("TextContentListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MessageVideoContent", b =>
                {
                    b.HasOne("IczpNet.Chat.MessageSections.Messages.Message", null)
                        .WithMany()
                        .HasForeignKey("MessageListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IczpNet.Chat.MessageSections.Templates.VideoContent", null)
                        .WithMany()
                        .HasForeignKey("VideoContentListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IczpNet.Chat.Articles.Article", b =>
                {
                    b.Navigation("MessageList");
                });

            modelBuilder.Entity("IczpNet.Chat.ChatObjectCategorys.ChatObjectCategory", b =>
                {
                    b.Navigation("ChatObjectCategoryUnitList");

                    b.Navigation("Childs");
                });

            modelBuilder.Entity("IczpNet.Chat.ChatObjectTypes.ChatObjectType", b =>
                {
                    b.Navigation("ChatObjectCategoryList");

                    b.Navigation("ChatObjectList");
                });

            modelBuilder.Entity("IczpNet.Chat.ChatObjects.ChatObject", b =>
                {
                    b.Navigation("ChatObjectCategoryUnitList");

                    b.Navigation("Childs");

                    b.Navigation("DestinationFriendshipList");

                    b.Navigation("DestinationFriendshipRequestList");

                    b.Navigation("DestinationSessionSettingList");

                    b.Navigation("DestinationSessionUnitList");

                    b.Navigation("InviterSessionUnitList");

                    b.Navigation("KillerSessionUnitList");

                    b.Navigation("MottoList");

                    b.Navigation("OwnerFriendshipList");

                    b.Navigation("OwnerFriendshipRequestList");

                    b.Navigation("OwnerSessionList");

                    b.Navigation("OwnerSessionSettingList");

                    b.Navigation("OwnerSessionUnitList");

                    b.Navigation("ReceiverMessageList");

                    b.Navigation("RedEnvelopeContentList");

                    b.Navigation("RedEnvelopeUnitList");

                    b.Navigation("SenderMessageList");
                });

            modelBuilder.Entity("IczpNet.Chat.MessageSections.MessageContents.MessageContent", b =>
                {
                    b.Navigation("MessageList");
                });

            modelBuilder.Entity("IczpNet.Chat.MessageSections.Messages.Message", b =>
                {
                    b.Navigation("FavoriteList");

                    b.Navigation("FavoritedCounter");

                    b.Navigation("ForwardedMessageList");

                    b.Navigation("HistoryMessageList");

                    b.Navigation("LastMessageSessionUnitList");

                    b.Navigation("MessageReminderList");

                    b.Navigation("OpenedCounter");

                    b.Navigation("OpenedRecorderList");

                    b.Navigation("QuotedMessageList");

                    b.Navigation("ReadedCounter");

                    b.Navigation("ReadedMessageSessionUnitList");

                    b.Navigation("ReadedRecorderList");

                    b.Navigation("ScopedList");

                    b.Navigation("SessionList");
                });

            modelBuilder.Entity("IczpNet.Chat.Mottos.Motto", b =>
                {
                    b.Navigation("ChatObjectList");
                });

            modelBuilder.Entity("IczpNet.Chat.RedEnvelopes.RedEnvelopeContent", b =>
                {
                    b.Navigation("RedEnvelopeUnitList");
                });

            modelBuilder.Entity("IczpNet.Chat.SessionSections.FriendshipRequests.FriendshipRequest", b =>
                {
                    b.Navigation("FriendshipList");
                });

            modelBuilder.Entity("IczpNet.Chat.SessionSections.Friendships.Friendship", b =>
                {
                    b.Navigation("FriendshipTagUnitList");
                });

            modelBuilder.Entity("IczpNet.Chat.SessionSections.Friendships.FriendshipTag", b =>
                {
                    b.Navigation("FriendshipList");
                });

            modelBuilder.Entity("IczpNet.Chat.SessionSections.SessionOrganizations.SessionOrganization", b =>
                {
                    b.Navigation("Childs");

                    b.Navigation("SessionUnitOrganizationList");
                });

            modelBuilder.Entity("IczpNet.Chat.SessionSections.SessionPermissionDefinitions.SessionPermissionDefinition", b =>
                {
                    b.Navigation("RoleGrantList");

                    b.Navigation("UnitGrantList");
                });

            modelBuilder.Entity("IczpNet.Chat.SessionSections.SessionPermissionGroups.SessionPermissionGroup", b =>
                {
                    b.Navigation("Childs");

                    b.Navigation("DefinitionList");
                });

            modelBuilder.Entity("IczpNet.Chat.SessionSections.SessionRoles.SessionRole", b =>
                {
                    b.Navigation("GrantList");

                    b.Navigation("SessionUnitRoleList");
                });

            modelBuilder.Entity("IczpNet.Chat.SessionSections.SessionTags.SessionTag", b =>
                {
                    b.Navigation("SessionUnitTagList");
                });

            modelBuilder.Entity("IczpNet.Chat.SessionSections.SessionUnits.SessionUnit", b =>
                {
                    b.Navigation("Counter");

                    b.Navigation("FavoriteList");

                    b.Navigation("GrantList");

                    b.Navigation("HandlerList");

                    b.Navigation("InviterList");

                    b.Navigation("InviterUnitList");

                    b.Navigation("KillerList");

                    b.Navigation("KillerUnitList");

                    b.Navigation("MessageList");

                    b.Navigation("OpenedRecorderList");

                    b.Navigation("OwnerFollowList");

                    b.Navigation("ReadedRecorderList");

                    b.Navigation("ReminderList");

                    b.Navigation("SessionUnitOrganizationList");

                    b.Navigation("SessionUnitRoleList");

                    b.Navigation("SessionUnitTagList");

                    b.Navigation("Setting");
                });

            modelBuilder.Entity("IczpNet.Chat.SessionSections.Sessions.Session", b =>
                {
                    b.Navigation("MessageList");

                    b.Navigation("RoleList");

                    b.Navigation("TagList");

                    b.Navigation("UnitList");
                });

            modelBuilder.Entity("IczpNet.Chat.Wallets.Wallet", b =>
                {
                    b.Navigation("WalletRecorderList");
                });

            modelBuilder.Entity("IczpNet.Chat.Wallets.WalletBusiness", b =>
                {
                    b.Navigation("WalletRecorderList");
                });
#pragma warning restore 612, 618
        }
    }
}

using IczpNet.Invoicing.Permissions;
using IczpNet.Invoicing.{{pascalCase pluralName}}.Dtos;
using System;
using System.Linq;
using System.Threading.Tasks;

namespace IczpNet.Invoicing.{{pascalCase pluralName}};

/// <inheritdoc />
public class {{pascalCase name}}AppService : CrudAppServiceBase<{{pascalCase name}}, {{pascalCase name}}DetailDto, {{pascalCase name}}Dto, {{pascalCase primaryKey}}, {{pascalCase name}}GetListInput, {{pascalCase name}}CreateInput, {{pascalCase name}}UpdateInput>, I{{pascalCase name}}AppService
{
    protected override string GetPolicyName { get; set; } = InvoicingPermissions.{{pascalCase name}}Permissions.GetItem;
    protected override string GetListPolicyName { get; set; } = InvoicingPermissions.{{pascalCase name}}Permissions.GetList;
    protected override string CreatePolicyName { get; set; } = InvoicingPermissions.{{pascalCase name}}Permissions.Create;
    protected override string UpdatePolicyName { get; set; } = InvoicingPermissions.{{pascalCase name}}Permissions.Update;
    protected override string DeletePolicyName { get; set; } = InvoicingPermissions.{{pascalCase name}}Permissions.Delete;
    protected override string SetIsEnabledPolicyName { get; set; } = InvoicingPermissions.{{pascalCase name}}Permissions.SetIsEnabled;

    public {{pascalCase name}}AppService(I{{pascalCase name}}Repository repository) : base(repository)
    {

    }

    /// <inheritdoc />
    protected override async Task<IQueryable<{{pascalCase name}}>> CreateFilteredQueryAsync({{pascalCase name}}GetListInput input)
    {
        return (await base.CreateFilteredQueryAsync(input))
            //.WhereIf(!string.IsNullOrWhiteSpace(input.Keyword), x => x.Name.Contains(input.Keyword))
            ;
    }
}
